@page "/"
@using Concept.ViewModel
@inject IJSRuntime JSRuntime
@inject ConceptViewModel ViewModel

<MudGrid Style="padding: 20px">
    <MudItem xs="9">
        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudList Clickable="true">
                    @for (int i = 0; i < 3; i++)
                    {
                        int index = i;
                        <MudListItem OnClick="@(async () => await ConceptPressed(index))">
                            <MudText Align="Align.Center">@(index + 1). @(ViewModel.EasyConcepts[index])</MudText>
                        </MudListItem>

                        if (index < 3)
                        {
                            <MudDivider />
                        }
                    }
                    @*<MudListItem OnClick="@(async () => await ConceptPressed(0))">
                        <MudText Align="Align.Center">1. @ViewModel.ConceptOne</MudText>
                    </MudListItem>
                    <MudDivider />
                    <MudListItem OnClick="@(async () => await ConceptPressed(1))">
                        <MudText Align="Align.Center">2. @Concepts[1]</MudText>
                    </MudListItem>
                    <MudDivider />
                    <MudListItem OnClick="@(async () => await ConceptPressed(2))">
                        <MudText Align="Align.Center">3. @Concepts[2]</MudText>
                    </MudListItem>*@
                </MudList>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"><MudIcon Icon="@Icons.Material.Outlined.SentimentSatisfied" Size="Size.Small" /></MudPaper>
    </MudItem>
    <MudItem xs="9">
        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudList Clickable="true">
                    @for (int i = 0; i < 3; i++)
                    {
                        int index = i;
                        <MudListItem OnClick="@(async () => await ConceptPressed(index))">
                            <MudText Align="Align.Center">@(index + 4). @(ViewModel.MediumConcepts[index])</MudText>
                        </MudListItem>

                        if (index < 3)
                        {
                            <MudDivider />
                        }
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"><MudIcon Icon="@Icons.Material.Outlined.SentimentNeutral" Size="Size.Small" /></MudPaper>
    </MudItem>
    <MudItem xs="9">
        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudList Clickable="true">
                    @for (int i = 0; i < 3; i++)
                    {
                        int index = i;
                        <MudListItem OnClick="@(async () => await ConceptPressed(index))">
                            <MudText Align="Align.Center">@(index + 7). @(ViewModel.HardConcepts[index])</MudText>
                        </MudListItem>

                        if (index < 3)
                        {
                            <MudDivider />
                        }
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"><MudIcon Icon="@Icons.Material.Outlined.SentimentDissatisfied" Size="Size.Small" /></MudPaper>
    </MudItem>
</MudGrid>

<MudPaper Elevation="0" Class="d-flex justify-center" Style="padding-left: 20px; padding-right: 20px">
    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateCard">Create Card</MudButton>
</MudPaper>

@*<footer>
    <SyncStatus />
</footer>*@

@code {
    private string[] Concepts = new string[9];

    //[CascadingParameter]
    //public Settings Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //ViewModel.PropertyChanged += async (sender, e) => {
        //    await InvokeAsync(() =>
        //    {
        //        StateHasChanged();
        //    });
        //};
        //await base.OnInitializedAsync();
    }

    async Task CreateCard()
    {
        //HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("Concept/GetConcepts", Layout);
        //Concepts = await responseMessage.Content.ReadFromJsonAsync<string[]>();
        //Concepts = await LocalConceptStore.GetConceptsAsync(Layout);

        await ViewModel.UpdateConceptsAsync();
    }

    private Task ConceptPressed(int index)
    {
        string searchTerm = Concepts[index];

        //await JSRuntime.InvokeVoidAsync("open", $"https://google.com/search?q={searchTerm}");

        return Task.CompletedTask;
    }
}