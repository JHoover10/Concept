@page "/"
@inject IJSRuntime JSRuntime
@inject ConceptViewModel ViewModel

<MudGrid Style="padding: 20px">
    <MudItem xs="9">
        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudList Clickable="true">
                    @for (int i = 0; i < 3; i++)
                    {
                        int index = i;
                        <MudListItem OnClick="@(async () => await ConceptPressed(ViewModel.EasyConcepts[index]))">
                            <MudText Align="Align.Center">@(index + 1). @(ViewModel.EasyConcepts[index])</MudText>
                        </MudListItem>

                        if (index < 3)
                        {
                            <MudDivider />
                        }
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"><MudIcon Icon="@Icons.Material.Outlined.SentimentSatisfied" Size="Size.Small" /></MudPaper>
    </MudItem>
    <MudItem xs="9">
        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudList Clickable="true">
                    @for (int i = 0; i < 3; i++)
                    {
                        int index = i;
                        <MudListItem OnClick="@(async () => await ConceptPressed(ViewModel.MediumConcepts[index]))">
                            <MudText Align="Align.Center">@(index + 4). @(ViewModel.MediumConcepts[index])</MudText>
                        </MudListItem>

                        if (index < 3)
                        {
                            <MudDivider />
                        }
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"><MudIcon Icon="@Icons.Material.Outlined.SentimentNeutral" Size="Size.Small" /></MudPaper>
    </MudItem>
    <MudItem xs="9">
        <MudItem xs="12">
            <MudPaper Elevation="2">
                <MudList Clickable="true">
                    @for (int i = 0; i < 3; i++)
                    {
                        int index = i;
                        <MudListItem OnClick="@(async () => await ConceptPressed(ViewModel.HardConcepts[index]))">
                            <MudText Align="Align.Center">@(index + 7). @(ViewModel.HardConcepts[index])</MudText>
                        </MudListItem>

                        if (index < 3)
                        {
                            <MudDivider />
                        }
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"><MudIcon Icon="@Icons.Material.Outlined.SentimentDissatisfied" Size="Size.Small" /></MudPaper>
    </MudItem>
</MudGrid>

<MudPaper Elevation="0" Class="d-flex justify-center" Style="padding-left: 20px; padding-right: 20px">
    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateCard">Create Card</MudButton>
</MudPaper>

@code {
    [CascadingParameter]
    public List<ConceptCategory> ConceptCategories { get; set; }

    async Task CreateCard()
    {
        await ViewModel.UpdateConceptsAsync(ConceptCategories);
    }

    private async Task ConceptPressed(string searchTerm)
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
            await JSRuntime.InvokeVoidAsync("open", $"https://google.com/search?q={searchTerm}");
    }
}