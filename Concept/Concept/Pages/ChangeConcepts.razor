@page "/changeconcepts"

<MudExpansionPanels Style="padding: 30px;" Dense="@_dense">
    @for (int i = 0; i < ConceptCategories.Count(); i++)
    {
        int index = i;

        if (ConceptCategories[index].SubCategories == null || !ConceptCategories[index].SubCategories.Any())
        {
            <MudExpansionPanel>
                <TitleContent>
                    <MudListItem Style="padding: 0px; width: 200px;">
                        <MudSwitch @bind-Checked="@ConceptCategories[index].Enabled" Color="Color.Primary" Label="@ConceptCategories[index].DisplayName" />
                    </MudListItem>
                </TitleContent>
            </MudExpansionPanel>
        }
        else
        {
            @*TODO: See if there is a better way to do this*@
            <MudExpansionPanel>
                <TitleContent>
                    <MudListItem Style="padding: 0px; width: 200px;">
                        <MudSwitch onclick="@(() => UpdateChildren(ConceptCategories[index], ConceptCategories[index].Enabled))" @bind-Checked="@ConceptCategories[index].Enabled" Color="Color.Primary" Label="@ConceptCategories[index].DisplayName" />
                    </MudListItem>
                </TitleContent>
                <ChildContent>
                    @foreach (ConceptCategory conceptCategory in ConceptCategories[index].SubCategories)
                    {
                        <MudListItem Inset="true" Style="padding: 0px;">
                            <MudSwitch onclick="@(() => UpdateParent(ConceptCategories[index], @conceptCategory.DisplayName, @conceptCategory.Enabled))" @bind-Checked="@conceptCategory.Enabled" Color="Color.Primary" Label="@conceptCategory.DisplayName" />
                        </MudListItem>
                    }
                </ChildContent>
            </MudExpansionPanel>
        }
    }
</MudExpansionPanels>

@code {
    private bool _dense = false;
    private string _style = string.Empty;

    [CascadingParameter]
    public List<ConceptCategory> ConceptCategories { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private void UpdateChildren(ConceptCategory parentCategory, bool currentSate)
    {
        foreach (ConceptCategory childCategory in parentCategory.SubCategories)
        {
            childCategory.Enabled = !currentSate;
        }
    }

    private void UpdateParent(ConceptCategory parentCategory, string updatedSwitch, bool currentState)
    {
        bool enabled = !currentState;

        foreach (ConceptCategory childCategory in parentCategory.SubCategories)
        {
            if (enabled)
                break;

            if (childCategory.DisplayName != updatedSwitch)
                enabled = childCategory.Enabled;
        }

        parentCategory.Enabled = enabled;
    }
}
