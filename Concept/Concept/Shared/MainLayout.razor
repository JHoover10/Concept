@inherits LayoutComponentBase

@inject MainLayoutViewModel ViewModel

<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3">Concept</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" OnClick="OpenSettings" />
    </MudAppBar>
    <MudMainContent>
        <CascadingValue Value="@ViewModel.ConceptCategories">
            @Body
        </CascadingValue>
        <MudOverlay @bind-Visible="isVisible" DarkBackground="true" AutoClose="true">
            <MudPaper Elevation="2">
                <MudList Clickable="false">
                    @for (int i = 0; i < ViewModel.ConceptCategories.Count(); i++)
                    {
                        int index = i;

                        if (ViewModel.ConceptCategories[index].SubCategories == null || !ViewModel.ConceptCategories[index].SubCategories.Any())
                        {
                            <MudListItem>
                                <MudSwitch @bind-Checked="@ViewModel.ConceptCategories[index].Enabled" Color="Color.Primary" Label="@ViewModel.ConceptCategories[index].DisplayName" />
                            </MudListItem>
                        }
                        else
                        {
                            @*TODO: See if there is a better way to do this*@
                            <MudListItem InitiallyExpanded="false">
                                <ChildContent>
                                    <MudListItem Style="padding: 0px;">
                                        <MudSwitch onclick="@(() => UpdateChildren(ViewModel.ConceptCategories[index], ViewModel.ConceptCategories[index].Enabled))" @bind-Checked="@ViewModel.ConceptCategories[index].Enabled" Color="Color.Primary" Label="@ViewModel.ConceptCategories[index].DisplayName"/>
                                    </MudListItem>
                                </ChildContent>                                                      
                                <NestedList>
                                    @foreach (ConceptCategory conceptCategory in ViewModel.ConceptCategories[index].SubCategories)
                                    {
                                        <MudListItem>
                                            <MudSwitch onclick="@(() => UpdateParent(ViewModel.ConceptCategories[index], @conceptCategory.DisplayName, @conceptCategory.Enabled))" @bind-Checked="@conceptCategory.Enabled" Color="Color.Primary" Label="@conceptCategory.DisplayName" />
                                        </MudListItem>
                                    }                                    
                                </NestedList>                                                   
                            </MudListItem>
                        }                    
                    }
                </MudList>
            </MudPaper>
        </MudOverlay>
    </MudMainContent>
</MudLayout>

@code {
    private bool isVisible;
    public bool boolean { get; set; } = false;

    public void OpenSettings()
    {
        isVisible = true;
        StateHasChanged();
    }

    private void UpdateChildren(ConceptCategory parentCategory, bool currentSate)
    {
        foreach (ConceptCategory childCategory in parentCategory.SubCategories)
        {
            childCategory.Enabled = !currentSate;
        }
    }

    private void UpdateParent(ConceptCategory parentCategory, string updatedSwitch, bool currentState)
    {
        bool enabled = !currentState;

        foreach (ConceptCategory childCategory in parentCategory.SubCategories)
        {
            if (enabled)
                break;

            if (childCategory.DisplayName != updatedSwitch)
                enabled = childCategory.Enabled;
        }

        parentCategory.Enabled = enabled;
    }
}